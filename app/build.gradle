apply plugin: 'com.android.application'
//VasDolly
apply plugin: 'channel'
//andResGuard
//apply from: 'and-res-guard.gradle'
//arouter
apply plugin: 'com.alibaba.arouter'


Properties properties = new Properties()
File localPropertiesFile = project.rootProject.file("local.properties");
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}

/**
 * 项目命令行打包指令：gradle assembleRelease rebuildChannel
 */
android {
    compileSdkVersion App.compileSdkVersion
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId App.applicationId
        minSdkVersion App.minSdkVersion
        targetSdkVersion App.targetSdkVersion
        resConfigs App.resConfigs
        versionCode App.versionCode
        versionName App.versionName
        testInstrumentationRunner Libs.androidJUnitRunner

        multiDexEnabled true
        renderscriptTargetApi App.targetSdkVersion
        renderscriptSupportModeEnabled true

        ndk {
            abiFilters 'armeabi-v7a'
        }

        vectorDrawables.useSupportLibrary = true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        //阿里用户反馈
        buildConfigField "String", "FEEDBACK_APP_KEY", properties.getProperty("fbAppKey", "\"\"")
        buildConfigField "String", "FEEDBACK_APP_SECRET", properties.getProperty("fbAppSecret", "\"\"")
        //bugly APP ID
        buildConfigField "String", "BUGLY_APP_ID", properties.getProperty("buglyAppId", "\"\"")
    }

    //gradle 3.0
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${defaultConfig.applicationId}_base_v${defaultConfig.versionName}.apk"
        }
    }

    signingConfigs {
        rabtman {
            storeFile file(properties.getProperty("storeFile"))
            storePassword properties.getProperty("storePassword")
            keyAlias properties.getProperty("keyAlias")
            keyPassword properties.getProperty("keyPassword")
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "APP_DEBUG", "true"      //测试模式
            minifyEnabled false
            signingConfig signingConfigs.rabtman
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi-v7a', 'x86'
            }
        }

        release {
            buildConfigField "boolean", "APP_DEBUG", "false"
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            signingConfig signingConfigs.rabtman
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        checkReleaseBuilds false
        abortOnError false
    }
}

//渠道配置
channel {
    //多渠道包的输出目录，默认为new File(project.buildDir,"channel")
    baseOutputDir = new File(project.buildDir, "channel")
    //多渠道包的命名规则，默认为：${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}
    apkNameFormat = 'com.rabtman.acgclub_${flavorName}_v${versionName}'
    //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上）
    isFastMode = false
}

//rebuildChannel
//根据已有基础包重新生成多渠道包
rebuildChannel {
    //baseDebugApk = 已有Debug APK
    baseReleaseApk = new File(project.buildDir, "outputs/apk/release/com.rabtman.acgclub_base_v${App.versionName}.apk")
    //默认为new File(project.buildDir, "rebuildChannel/debug")
    //debugOutputDir = Debug渠道包输出目录
    //默认为new File(project.buildDir, "rebuildChannel/release")
    //releaseOutputDir = Release渠道包输出目录
}

repositories {
    flatDir {
        dirs 'libs'
    }
}
App.components.each {c->
    if (c) {
        project.dependencies.add("implementation", project.project(':component-' + c))
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':common')

    //di
    annotationProcessor Libs.dagger2_compiler
    annotationProcessor Libs.butterknife_compiler
    annotationProcessor Libs.router_compiler
    //阿里用户反馈
    implementation 'com.aliyun.ams:alicloud-android-feedback:3.1.0@aar'
    implementation 'com.aliyun.ams:alicloud-android-utdid:1.1.5.3'
    implementation 'com.aliyun.ams:alicloud-android-ut:5.1.0'
    implementation 'com.aliyun.ams:alicloud-android-utils:1.0.3'
    //bugly
    implementation Libs.crashreport
    implementation Libs.nativecrashreport
    //VasDolly
    api Libs.vasdolly
}
